response1=$(aws sso-oidc register-client --client-name curl --client-type public)

for s in $(echo $response1 | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
    export $s
done

echo $1
response2=$(aws sso-oidc start-device-authorization --client-id $clientId --client-secret=$clientSecret --start-url=$1)

for s in $(echo $response2 | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
    export $s
done

$BROWSER $verificationUriComplete >> /dev/null

echo The default web browser has been opened at $verificationUriComplete. Please continue the login in the web browser

false
while [ $? -ne 0 ]; do
    sleep 1
    response3=$(aws sso-oidc create-token --client-id $clientId --client-secret=$clientSecret --device-code=$deviceCode --grant-type urn:ietf:params:oauth:grant-type:device_code 2> /dev/null)
done

echo
printf "Gathering credentials"

for s in $(echo $response3 | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
    export $s
done

response4=$(aws sso list-accounts --access-token $accessToken)

for accountId in $(echo $response4 | jq -r ".accountList[].accountId|tostring"); do
    response5=$(aws sso list-account-roles --account-id $accountId --access-token $accessToken)

    for roleName in $(echo $response5 | jq -r ".roleList[].roleName|tostring"); do
        printf "."
        response6=$(aws sso get-role-credentials --role-name $roleName --account-id=$accountId --access-token $accessToken)
        for s in $(echo $response6 | jq -r ".roleCredentials|to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
            export $s
        done

        expiration=`echo $expiration | cut -c1-10`
        crudini --set ~/.aws/credentials ${accountId}_${roleName} aws_access_key_id $accessKeyId
        crudini --set ~/.aws/credentials ${accountId}_${roleName} aws_secret_access_key $secretAccessKey
        crudini --set ~/.aws/credentials ${accountId}_${roleName} aws_session_token $sessionToken
        crudini --set ~/.aws/credentials ${accountId}_${roleName} expiration "$(date -d @$expiration)"
    done
done

echo
echo "Done"